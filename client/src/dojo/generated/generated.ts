/* Autogenerated file. Do not edit manually. */

import { Account } from "starknet";
import { DojoProvider } from "@dojoengine/core";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    function hub() {
        const contract_name = "hub";

        const spawn = async ({ account }: { account: Account }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "spawn",
                    []
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        const new_player = async ({ account }: { account: Account }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "new_player",
                    [1]
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        return { spawn, new_player };
    }


    function arena() {
        const contract_name = "arena";

        const create_challenge = async ({ account, team_id }: { account: Account, team_id: number }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "create_challenge",
                    [team_id]
                );
            } catch (error) {
                console.error("Error executing create_challenge:", error);
                throw error;
            }
        };

        const accept_challenge = async ({ account,game_id, team_id }: { account: Account,game_id: number, team_id: number }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "accept_challenge",
                    [game_id, team_id]
                );
            } catch (error) {
                console.error("Error executing accept_challenge:", error);
                throw error;
            }
        };

        const take_turn = async ({ account, game_id, piece_id, x, y }: { 
                account: Account, game_id: number, piece_id: number, x:number, y:number }
            ) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "take_turn",
                    [game_id, piece_id, x, y]
                );
            } catch (error) {
                console.error("Error executing take_turn:", error);
                throw error;
            }
        };

        return { create_challenge, accept_challenge, take_turn };
    }


    function builder() {
        const contract_name = "builder";

        const create_team = async ({ account}: { account: Account}) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "create_team",
                    []
                );
            } catch (error) {
                console.error("Error executing create_challenge:", error);
                throw error;
            }
        };

        const remove_piece_from_team = async ({ account, piece_id, team_id }: { account: Account,piece_id: number, team_id: number }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "remove_piece_from_team",
                    [piece_id, team_id]
                );
            } catch (error) {
                console.error("Error executing accept_challenge:", error);
                throw error;
            }
        };

        const add_piece_to_team = async ({ account, piece_id, team_id }: { 
                account: Account, piece_id: number, team_id:number}
            ) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "add_piece_to_team",
                    [piece_id, team_id]
                );
            } catch (error) {
                console.error("Error executing take_turn:", error);
                throw error;
            }
        };

        const starter_team = async ({ account }: { account: Account }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "starter_team",
                    []
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        return { create_team, starter_team, add_piece_to_team, remove_piece_from_team };
    }


    function genshin() {
        const contract_name = "genshin";

        const mint_piece = async ({ account }: { account: Account }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "mint_piece",
                    []
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        return { mint_piece };
    }


    function gov() {
        const contract_name = "gov";

        const buff = async ({ account, type_id }: { account: Account, type_id: number }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "buff",
                    [type_id]
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
        const nerf = async ({ account, type_id }: { account: Account, type_id: number }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "nerf",
                    [type_id]
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
        const add_piece = async ({ account}: { account: Account }) => {
            try {
                return await provider.execute(
                    account,
                    contract_name,
                    "add_piece",
                    []
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        return { buff, nerf, add_piece };
    }
    return {
        hub: hub(),
        arena: arena(),
        gov: gov(),
        genshin: genshin(),
        builder: builder()        
    };
}
